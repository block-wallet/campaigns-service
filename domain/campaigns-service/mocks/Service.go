// Code generated by mockery v2.23.2. DO NOT EDIT.

package campaignsservicemocks

import (
	context "context"

	errors "github.com/block-wallet/campaigns-service/utils/errors"
	mock "github.com/stretchr/testify/mock"

	model "github.com/block-wallet/campaigns-service/domain/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: ctx, input
func (_m *Service) CreateCampaign(ctx context.Context, input *model.CreateCampaignInput) (*model.Campaign, errors.RichError) {
	ret := _m.Called(ctx, input)

	var r0 *model.Campaign
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCampaignInput) (*model.Campaign, errors.RichError)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCampaignInput) *model.Campaign); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateCampaignInput) errors.RichError); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// EnrollInCampaign provides a mock function with given fields: ctx, input
func (_m *Service) EnrollInCampaign(ctx context.Context, input *model.EnrollInCampaignInput) (bool, errors.RichError) {
	ret := _m.Called(ctx, input)

	var r0 bool
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, *model.EnrollInCampaignInput) (bool, errors.RichError)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.EnrollInCampaignInput) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.EnrollInCampaignInput) errors.RichError); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// GetAllTokens provides a mock function with given fields: ctx
func (_m *Service) GetAllTokens(ctx context.Context) ([]*model.MultichainToken, errors.RichError) {
	ret := _m.Called(ctx)

	var r0 []*model.MultichainToken
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.MultichainToken, errors.RichError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.MultichainToken); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.MultichainToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) errors.RichError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// GetCampaignById provides a mock function with given fields: ctx, id
func (_m *Service) GetCampaignById(ctx context.Context, id string) (*model.Campaign, errors.RichError) {
	ret := _m.Called(ctx, id)

	var r0 *model.Campaign
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Campaign, errors.RichError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Campaign); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.RichError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// GetCampaigns provides a mock function with given fields: ctx, filters
func (_m *Service) GetCampaigns(ctx context.Context, filters *model.GetCampaignsFilters) ([]*model.Campaign, errors.RichError) {
	ret := _m.Called(ctx, filters)

	var r0 []*model.Campaign
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCampaignsFilters) ([]*model.Campaign, errors.RichError)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCampaignsFilters) []*model.Campaign); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetCampaignsFilters) errors.RichError); ok {
		r1 = rf(ctx, filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// GetTokenById provides a mock function with given fields: ctx, id
func (_m *Service) GetTokenById(ctx context.Context, id string) (*model.MultichainToken, errors.RichError) {
	ret := _m.Called(ctx, id)

	var r0 *model.MultichainToken
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.MultichainToken, errors.RichError)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.MultichainToken); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MultichainToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.RichError); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: ctx, input
func (_m *Service) UpdateCampaign(ctx context.Context, input *model.UpdateCampaignInput) (*model.Campaign, errors.RichError) {
	ret := _m.Called(ctx, input)

	var r0 *model.Campaign
	var r1 errors.RichError
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCampaignInput) (*model.Campaign, errors.RichError)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCampaignInput) *model.Campaign); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateCampaignInput) errors.RichError); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.RichError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
