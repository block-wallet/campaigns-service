// Code generated by mockery v2.23.2. DO NOT EDIT.

package campaignsservicemocks

import (
	campaignsservicev1 "github.com/block-wallet/campaigns-service/protos/src/campaignsservicev1/campaigns"
	mock "github.com/stretchr/testify/mock"

	model "github.com/block-wallet/campaigns-service/domain/model"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// ConvertFromModelCampaignToProtoCampaign provides a mock function with given fields: campaign
func (_m *Converter) ConvertFromModelCampaignToProtoCampaign(campaign *model.Campaign) *campaignsservicev1.Campaign {
	ret := _m.Called(campaign)

	var r0 *campaignsservicev1.Campaign
	if rf, ok := ret.Get(0).(func(*model.Campaign) *campaignsservicev1.Campaign); ok {
		r0 = rf(campaign)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*campaignsservicev1.Campaign)
		}
	}

	return r0
}

// ConvertFromModelMultichainTokenToProtoMultichainToken provides a mock function with given fields: t
func (_m *Converter) ConvertFromModelMultichainTokenToProtoMultichainToken(t *model.MultichainToken) *campaignsservicev1.MultichainToken {
	ret := _m.Called(t)

	var r0 *campaignsservicev1.MultichainToken
	if rf, ok := ret.Get(0).(func(*model.MultichainToken) *campaignsservicev1.MultichainToken); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*campaignsservicev1.MultichainToken)
		}
	}

	return r0
}

// ConvertFromProtoCampaignsFiltersToModelCampaignFilters provides a mock function with given fields: filters
func (_m *Converter) ConvertFromProtoCampaignsFiltersToModelCampaignFilters(filters *campaignsservicev1.GetCampaignsFilters) (*model.GetCampaignsFilters, error) {
	ret := _m.Called(filters)

	var r0 *model.GetCampaignsFilters
	var r1 error
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.GetCampaignsFilters) (*model.GetCampaignsFilters, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.GetCampaignsFilters) *model.GetCampaignsFilters); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCampaignsFilters)
		}
	}

	if rf, ok := ret.Get(1).(func(*campaignsservicev1.GetCampaignsFilters) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertFromProtoCreateCampaignToModelCreateCampaign provides a mock function with given fields: campaignInput
func (_m *Converter) ConvertFromProtoCreateCampaignToModelCreateCampaign(campaignInput *campaignsservicev1.CreateCampaignMsg) (*model.CreateCampaignInput, error) {
	ret := _m.Called(campaignInput)

	var r0 *model.CreateCampaignInput
	var r1 error
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.CreateCampaignMsg) (*model.CreateCampaignInput, error)); ok {
		return rf(campaignInput)
	}
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.CreateCampaignMsg) *model.CreateCampaignInput); ok {
		r0 = rf(campaignInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateCampaignInput)
		}
	}

	if rf, ok := ret.Get(1).(func(*campaignsservicev1.CreateCampaignMsg) error); ok {
		r1 = rf(campaignInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertFromProtoEnrollInCampaignToModelEnrollInCampaign provides a mock function with given fields: campaignInput
func (_m *Converter) ConvertFromProtoEnrollInCampaignToModelEnrollInCampaign(campaignInput *campaignsservicev1.EnrollInCampaignMsg) *model.EnrollInCampaignInput {
	ret := _m.Called(campaignInput)

	var r0 *model.EnrollInCampaignInput
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.EnrollInCampaignMsg) *model.EnrollInCampaignInput); ok {
		r0 = rf(campaignInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EnrollInCampaignInput)
		}
	}

	return r0
}

// ConvertFromProtoUpdateCampaignToModelUpdateCampaign provides a mock function with given fields: campaignInput
func (_m *Converter) ConvertFromProtoUpdateCampaignToModelUpdateCampaign(campaignInput *campaignsservicev1.UpdateCampaignMsg) *model.UpdateCampaignInput {
	ret := _m.Called(campaignInput)

	var r0 *model.UpdateCampaignInput
	if rf, ok := ret.Get(0).(func(*campaignsservicev1.UpdateCampaignMsg) *model.UpdateCampaignInput); ok {
		r0 = rf(campaignInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateCampaignInput)
		}
	}

	return r0
}

type mockConstructorTestingTNewConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConverter(t mockConstructorTestingTNewConverter) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
