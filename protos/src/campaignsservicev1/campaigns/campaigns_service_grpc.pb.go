// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: campaignsservicev1/campaigns/campaigns_service.proto

package campaignsservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CampaignsSerivce_GetCampaigns_FullMethodName             = "/campaignsservice.v1.CampaignsSerivce/GetCampaigns"
	CampaignsSerivce_GetCampaignById_FullMethodName          = "/campaignsservice.v1.CampaignsSerivce/GetCampaignById"
	CampaignsSerivce_GetCampaignAccounts_FullMethodName      = "/campaignsservice.v1.CampaignsSerivce/GetCampaignAccounts"
	CampaignsSerivce_GetCampaignEnrollMessage_FullMethodName = "/campaignsservice.v1.CampaignsSerivce/GetCampaignEnrollMessage"
	CampaignsSerivce_EnrollInCampaign_FullMethodName         = "/campaignsservice.v1.CampaignsSerivce/EnrollInCampaign"
	CampaignsSerivce_CreateCampaign_FullMethodName           = "/campaignsservice.v1.CampaignsSerivce/CreateCampaign"
	CampaignsSerivce_UpdateCampaign_FullMethodName           = "/campaignsservice.v1.CampaignsSerivce/UpdateCampaign"
	CampaignsSerivce_GetTokens_FullMethodName                = "/campaignsservice.v1.CampaignsSerivce/GetTokens"
	CampaignsSerivce_GetTokenById_FullMethodName             = "/campaignsservice.v1.CampaignsSerivce/GetTokenById"
)

// CampaignsSerivceClient is the client API for CampaignsSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignsSerivceClient interface {
	// campaigns
	GetCampaigns(ctx context.Context, in *GetCampaignsMsg, opts ...grpc.CallOption) (*GetCampaignsReply, error)
	GetCampaignById(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignByIdReply, error)
	GetCampaignAccounts(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignAccountsReply, error)
	GetCampaignEnrollMessage(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignEnrollMessageReply, error)
	EnrollInCampaign(ctx context.Context, in *EnrollInCampaignMsg, opts ...grpc.CallOption) (*EnrollInCampaignReply, error)
	CreateCampaign(ctx context.Context, in *CreateCampaignMsg, opts ...grpc.CallOption) (*CreateCampaignReply, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignMsg, opts ...grpc.CallOption) (*UpdateCampaignReply, error)
	// tokens
	GetTokens(ctx context.Context, in *GetTokensMsg, opts ...grpc.CallOption) (*GetTokensReply, error)
	GetTokenById(ctx context.Context, in *GetTokenByIdMsg, opts ...grpc.CallOption) (*GetTokenByIdReply, error)
}

type campaignsSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignsSerivceClient(cc grpc.ClientConnInterface) CampaignsSerivceClient {
	return &campaignsSerivceClient{cc}
}

func (c *campaignsSerivceClient) GetCampaigns(ctx context.Context, in *GetCampaignsMsg, opts ...grpc.CallOption) (*GetCampaignsReply, error) {
	out := new(GetCampaignsReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetCampaigns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) GetCampaignById(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignByIdReply, error) {
	out := new(GetCampaignByIdReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetCampaignById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) GetCampaignAccounts(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignAccountsReply, error) {
	out := new(GetCampaignAccountsReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetCampaignAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) GetCampaignEnrollMessage(ctx context.Context, in *GetCampaignByIdMsg, opts ...grpc.CallOption) (*GetCampaignEnrollMessageReply, error) {
	out := new(GetCampaignEnrollMessageReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetCampaignEnrollMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) EnrollInCampaign(ctx context.Context, in *EnrollInCampaignMsg, opts ...grpc.CallOption) (*EnrollInCampaignReply, error) {
	out := new(EnrollInCampaignReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_EnrollInCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) CreateCampaign(ctx context.Context, in *CreateCampaignMsg, opts ...grpc.CallOption) (*CreateCampaignReply, error) {
	out := new(CreateCampaignReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_CreateCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignMsg, opts ...grpc.CallOption) (*UpdateCampaignReply, error) {
	out := new(UpdateCampaignReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_UpdateCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) GetTokens(ctx context.Context, in *GetTokensMsg, opts ...grpc.CallOption) (*GetTokensReply, error) {
	out := new(GetTokensReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsSerivceClient) GetTokenById(ctx context.Context, in *GetTokenByIdMsg, opts ...grpc.CallOption) (*GetTokenByIdReply, error) {
	out := new(GetTokenByIdReply)
	err := c.cc.Invoke(ctx, CampaignsSerivce_GetTokenById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignsSerivceServer is the server API for CampaignsSerivce service.
// All implementations should embed UnimplementedCampaignsSerivceServer
// for forward compatibility
type CampaignsSerivceServer interface {
	// campaigns
	GetCampaigns(context.Context, *GetCampaignsMsg) (*GetCampaignsReply, error)
	GetCampaignById(context.Context, *GetCampaignByIdMsg) (*GetCampaignByIdReply, error)
	GetCampaignAccounts(context.Context, *GetCampaignByIdMsg) (*GetCampaignAccountsReply, error)
	GetCampaignEnrollMessage(context.Context, *GetCampaignByIdMsg) (*GetCampaignEnrollMessageReply, error)
	EnrollInCampaign(context.Context, *EnrollInCampaignMsg) (*EnrollInCampaignReply, error)
	CreateCampaign(context.Context, *CreateCampaignMsg) (*CreateCampaignReply, error)
	UpdateCampaign(context.Context, *UpdateCampaignMsg) (*UpdateCampaignReply, error)
	// tokens
	GetTokens(context.Context, *GetTokensMsg) (*GetTokensReply, error)
	GetTokenById(context.Context, *GetTokenByIdMsg) (*GetTokenByIdReply, error)
}

// UnimplementedCampaignsSerivceServer should be embedded to have forward compatible implementations.
type UnimplementedCampaignsSerivceServer struct {
}

func (UnimplementedCampaignsSerivceServer) GetCampaigns(context.Context, *GetCampaignsMsg) (*GetCampaignsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaigns not implemented")
}
func (UnimplementedCampaignsSerivceServer) GetCampaignById(context.Context, *GetCampaignByIdMsg) (*GetCampaignByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignById not implemented")
}
func (UnimplementedCampaignsSerivceServer) GetCampaignAccounts(context.Context, *GetCampaignByIdMsg) (*GetCampaignAccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignAccounts not implemented")
}
func (UnimplementedCampaignsSerivceServer) GetCampaignEnrollMessage(context.Context, *GetCampaignByIdMsg) (*GetCampaignEnrollMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignEnrollMessage not implemented")
}
func (UnimplementedCampaignsSerivceServer) EnrollInCampaign(context.Context, *EnrollInCampaignMsg) (*EnrollInCampaignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollInCampaign not implemented")
}
func (UnimplementedCampaignsSerivceServer) CreateCampaign(context.Context, *CreateCampaignMsg) (*CreateCampaignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedCampaignsSerivceServer) UpdateCampaign(context.Context, *UpdateCampaignMsg) (*UpdateCampaignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedCampaignsSerivceServer) GetTokens(context.Context, *GetTokensMsg) (*GetTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedCampaignsSerivceServer) GetTokenById(context.Context, *GetTokenByIdMsg) (*GetTokenByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}

// UnsafeCampaignsSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignsSerivceServer will
// result in compilation errors.
type UnsafeCampaignsSerivceServer interface {
	mustEmbedUnimplementedCampaignsSerivceServer()
}

func RegisterCampaignsSerivceServer(s grpc.ServiceRegistrar, srv CampaignsSerivceServer) {
	s.RegisterService(&CampaignsSerivce_ServiceDesc, srv)
}

func _CampaignsSerivce_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetCampaigns(ctx, req.(*GetCampaignsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_GetCampaignById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetCampaignById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetCampaignById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetCampaignById(ctx, req.(*GetCampaignByIdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_GetCampaignAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetCampaignAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetCampaignAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetCampaignAccounts(ctx, req.(*GetCampaignByIdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_GetCampaignEnrollMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignByIdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetCampaignEnrollMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetCampaignEnrollMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetCampaignEnrollMessage(ctx, req.(*GetCampaignByIdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_EnrollInCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollInCampaignMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).EnrollInCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_EnrollInCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).EnrollInCampaign(ctx, req.(*EnrollInCampaignMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).CreateCampaign(ctx, req.(*CreateCampaignMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).UpdateCampaign(ctx, req.(*UpdateCampaignMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetTokens(ctx, req.(*GetTokensMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsSerivce_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenByIdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsSerivceServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsSerivce_GetTokenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsSerivceServer).GetTokenById(ctx, req.(*GetTokenByIdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignsSerivce_ServiceDesc is the grpc.ServiceDesc for CampaignsSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignsSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campaignsservice.v1.CampaignsSerivce",
	HandlerType: (*CampaignsSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampaigns",
			Handler:    _CampaignsSerivce_GetCampaigns_Handler,
		},
		{
			MethodName: "GetCampaignById",
			Handler:    _CampaignsSerivce_GetCampaignById_Handler,
		},
		{
			MethodName: "GetCampaignAccounts",
			Handler:    _CampaignsSerivce_GetCampaignAccounts_Handler,
		},
		{
			MethodName: "GetCampaignEnrollMessage",
			Handler:    _CampaignsSerivce_GetCampaignEnrollMessage_Handler,
		},
		{
			MethodName: "EnrollInCampaign",
			Handler:    _CampaignsSerivce_EnrollInCampaign_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _CampaignsSerivce_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _CampaignsSerivce_UpdateCampaign_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _CampaignsSerivce_GetTokens_Handler,
		},
		{
			MethodName: "GetTokenById",
			Handler:    _CampaignsSerivce_GetTokenById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campaignsservicev1/campaigns/campaigns_service.proto",
}
