syntax = "proto3";

package ethservice.v1;

option go_package = "github.com/block-wallet/golang-service-template/protos/ethservicev1/src/eth;ethservicev1service";
option java_multiple_files = true;
option java_outer_classname = "EthServiceProto";
option java_package = "com.ethservice.v1";

import "common.proto";
import "google/api/annotations.proto";

// Service for managing the chain information.
service ETHService {
  // Returns a event.
  rpc GetEvents(GetEventsMsg) returns (GetEventsReply) {
    option (google.api.http) = {
      get: "/events"
    };
  }
  // Return the chains.
  rpc GetChains(EmptyMsg) returns (GetChainsReply) {
    option (google.api.http) = {
      get: "/chains"
    };
  }
}

// Requesting events by pair.
message GetEventsMsg {
  string pair = 1;
}

// Collection of events.
message GetEventsReply {
  repeated Event events = 1;
}

// A blockchain deposit.
message Event {
  uint64 block_number = 1;
  string commitment = 2;
  uint32 leaf_index = 3;
  string timestamp = 4;
  string transaction_hash = 5;
}

// Collection of chains.
message GetChainsReply {
  repeated Chain chains = 1;
}

// Am EVM chain.
message Chain {
  string name = 1;
  string chain = 2;
  string network = 3;
  string icon = 4;
  repeated string rpc = 5;
  repeated string faucet = 6;
  NativeCurrency native_currency = 7;
  string info_url = 8;
  string short_name = 9;
  uint64 chain_id = 10;
  uint64 network_id = 11;
  Ens ens = 12;
  repeated Explorer explorers = 13;
}

// Info of a native currency.
message NativeCurrency {
  string name = 1;
  string symbol = 2;
  uint64 decimals = 3;
}

// Info of an ENS registry.
message Ens {
  string registry = 1;
}

// Info of a chain explorer.
message Explorer {
  string name = 1;
  string url = 2;
  string standard = 3;
}
